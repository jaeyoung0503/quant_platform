
==================================================
File: C:\Aproject\system_admin\combine.py
==================================================
import os

# 설정
input_dirs = [
    r"C:\Aproject\system_admin",
    # r"C:\Aproject\quant-platform\quant-trading-platform\backend",
    # r"C:\Aproject\quant-platform\src",
    # r"C:\Aproject\quant-platform\backtester"
]  # 입력 디렉토리 목록
output_file = r"C:\Aproject\quant_platform\combined_output.txt"  # 출력 파일
file_extensions = [".py", ".ts", ".tsx", ".js", ".json"]  # 포함할 파일 확장자

def combine_files():
    # 출력 파일 초기화
    with open(output_file, 'w', encoding='utf-8') as outfile:
        # 각 입력 디렉토리 순회
        for dir_path in input_dirs:
            if not os.path.exists(dir_path):
                outfile.write(f"\n{'='*50}\n")
                outfile.write(f"Directory not found: {dir_path}\n")
                outfile.write(f"{'='*50}\n")
                continue

            # 디렉토리 내 파일 순회
            for root, dirs, files in os.walk(dir_path):
                # node_modules 및 .next 디렉토리 제외
                if 'node_modules' in dirs:
                    dirs.remove('node_modules')  # node_modules 제외
                if '.next' in dirs:
                    dirs.remove('.next')  # .next 디렉토리 제외
                for file in files:
                    if any(file.endswith(ext) for ext in file_extensions):  # 지정된 확장자 확인
                        file_path = os.path.join(root, file)
                        try:
                            # 파일 내용 읽기
                            with open(file_path, 'r', encoding='utf-8') as infile:
                                content = infile.read()
                            # 출력 파일에 파일 경로와 내용 기록
                            outfile.write(f"\n{'='*50}\n")
                            outfile.write(f"File: {file_path}\n")
                            outfile.write(f"{'='*50}\n")
                            outfile.write(content)
                            outfile.write("\n\n")  # 파일 간 구분을 위한 빈 줄
                        except UnicodeDecodeError:
                            # 인코딩 오류 시 cp949 시도
                            try:
                                with open(file_path, 'r', encoding='cp949') as infile:
                                    content = infile.read()
                                outfile.write(f"\n{'='*50}\n")
                                outfile.write(f"File: {file_path} (encoded in cp949)\n")
                                outfile.write(f"{'='*50}\n")
                                outfile.write(content)
                                outfile.write("\n\n")
                            except Exception as e:
                                outfile.write(f"\n{'='*50}\n")
                                outfile.write(f"Error reading {file_path}: {str(e)}\n")
                                outfile.write(f"{'='*50}\n")
                        except Exception as e:
                            outfile.write(f"\n{'='*50}\n")
                            outfile.write(f"Error reading {file_path}: {str(e)}\n")
                            outfile.write(f"{'='*50}\n")

if __name__ == "__main__":
    combine_files()
    print(f"모든 파일이 {output_file}로 합쳐졌습니다.")


==================================================
File: C:\Aproject\system_admin\middleware.ts
==================================================
// middleware.ts
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // 관리자 페이지 보호
  if (request.nextUrl.pathname.startsWith('/admin')) {
    const token = request.cookies.get('access_token')
    
    if (!token && request.nextUrl.pathname !== '/login') {
      return NextResponse.redirect(new URL('/login', request.url))
    }
  }

  return NextResponse.next()
}

export const config = {
  matcher: ['/admin/:path*']
}

// app/globals.css
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  html, body, #__next {
    height: 100%;
  }
}

@layer components {
  .stat-card {
    @apply bg-white p-6 rounded-lg shadow-sm border transition-all hover:shadow-md;
  }
  
  .alert-card {
    @apply p-4 rounded-lg border-l-4 transition-colors;
  }
  
  .metric-badge {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
  }
}



==================================================
File: C:\Aproject\system_admin\next.config.js
==================================================
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
}

module.exports = nextConfig


==================================================
File: C:\Aproject\system_admin\package.json
==================================================
{
  "name": "quant-admin-dashboard",
  "version": "2.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "14.0.3",
    "react": "^18",
    "react-dom": "^18",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "typescript": "^5",
    "tailwindcss": "^3.3.6",
    "autoprefixer": "^10.4.16",
    "postcss": "^8.4.32",
    "@supabase/supabase-js": "^2.38.5",
    "axios": "^1.6.2",
    "recharts": "^2.8.0",
    "lucide-react": "^0.294.0",
    "@headlessui/react": "^1.7.17",
    "clsx": "^2.0.0",
    "date-fns": "^2.30.0",
    "react-hot-toast": "^2.4.1",
    "@tanstack/react-query": "^5.8.4",
    "zustand": "^4.4.7"
  }
}

// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    appDir: true,
  },
  images: {
    domains: ['localhost'],
  },
}

module.exports = nextConfig

// app/layout.tsx
import { Inter } from 'next/font/google'
import './globals.css'
import { Providers } from './providers'
import { Toaster } from 'react-hot-toast'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: '퀀트 전략 관리자 대시보드',
  description: '퀀트 투자 전략 플랫폼 관리자 시스템',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="ko">
      <body className={inter.className}>
        <Providers>
          {children}
          <Toaster position="top-right" />
        </Providers>
      </body>
    </html>
  )
}



==================================================
File: C:\Aproject\system_admin\tailwind.config.js
==================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
    './app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}



==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\app\providers.tsx
==================================================
 // app/providers.tsx
'use client'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { useState } from 'react'
import { AuthProvider } from '@/lib/auth-context'

export function Providers({ children }: { children: React.ReactNode }) {
  const [queryClient] = useState(() => new QueryClient({
    defaultOptions: {
      queries: {
        staleTime: 60 * 1000, // 1 minute
        cacheTime: 10 * 60 * 1000, // 10 minutes
      },
    },
  }))

  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        {children}
      </AuthProvider>
    </QueryClientProvider>
  )
}



==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\app\admin\layout.tsx
==================================================
 



==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\app\admin\page.tsx
==================================================
// app/admin/page.tsx
import { Suspense } from 'react'
import AdminLayout from '@/components/layout/admin-layout'
import DashboardStats from '@/components/dashboard/dashboard-stats'
import RevenueChart from '@/components/dashboard/revenue-chart'
import UserGrowthChart from '@/components/dashboard/user-growth-chart'
import QuickActions from '@/components/dashboard/quick-actions'
import { Metadata } from 'next'

export const metadata: Metadata = {
  title: '대시보드 | 퀀트 관리자',
  description: '퀀트 전략 플랫폼 관리자 대시보드',
}

function DashboardSkeleton() {
  return (
    <div className="animate-pulse space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {[...Array(4)].map((_, i) => (
          <div key={i} className="bg-white p-6 rounded-lg shadow-sm border">
            <div className="h-4 bg-gray-200 rounded w-1/2 mb-2"></div>
            <div className="h-8 bg-gray-200 rounded w-3/4"></div>
          </div>
        ))}
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div className="bg-white p-6 rounded-lg shadow-sm border h-80"></div>
        <div className="bg-white p-6 rounded-lg shadow-sm border h-80"></div>
      </div>
    </div>
  )
}

export default function AdminDashboard() {
  return (
    <AdminLayout>
      <div className="space-y-8">
        {/* Header */}
        <div>
          <h1 className="text-2xl font-bold text-gray-900">관리자 대시보드</h1>
          <p className="text-gray-600">퀀트 전략 플랫폼의 전체 현황을 확인하세요.</p>
        </div>

        <Suspense fallback={<DashboardSkeleton />}>
          {/* Stats Cards */}
          <DashboardStats />

          {/* Charts */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <RevenueChart />
            <UserGrowthChart />
          </div>

          {/* Quick Actions */}
          <QuickActions />
        </Suspense>
      </div>
    </AdminLayout>
  )
} 



==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\app\admin\analytics\page.tsx
==================================================
 



==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\app\admin\payments\page.tsx
==================================================
// app/admin/payments/page.tsx
'use client'

import { useState } from 'react'
import { useQuery } from '@tanstack/react-query'
import AdminLayout from '@/components/layout/admin-layout'
import { adminAPI } from '@/lib/api'
import { CreditCard, Download, CheckCircle, XCircle, Clock, RefreshCw } from 'lucide-react'
import clsx from 'clsx'

export default function PaymentsPage() {
  const [statusFilter, setStatusFilter] = useState('')
  const [dateFrom, setDateFrom] = useState('')
  const [dateTo, setDateTo] = useState('')
  const [currentPage, setCurrentPage] = useState(1)
  const pageSize = 20

  const { data: payments, isLoading, refetch } = useQuery({
    queryKey: ['payments', { 
      skip: (currentPage - 1) * pageSize, 
      limit: pageSize, 
      status: statusFilter || undefined,
      start_date: dateFrom || undefined,
      end_date: dateTo || undefined
    }],
    queryFn: () => adminAPI.getPayments({ 
      skip: (currentPage - 1) * pageSize, 
      limit: pageSize, 
      status: statusFilter || undefined,
      start_date: dateFrom || undefined,
      end_date: dateTo || undefined
    }),
  })

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'completed':
        return (
          <span className="inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
            <CheckCircle className="w-3 h-3 mr-1" />
            완료
          </span>
        )
      case 'pending':
        return (
          <span className="inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800">
            <Clock className="w-3 h-3 mr-1" />
            대기
          </span>
        )
      case 'failed':
        return (
          <span className="inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
            <XCircle className="w-3 h-3 mr-1" />
            실패
          </span>
        )
      case 'refunded':
        return (
          <span className="inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800">
            <RefreshCw className="w-3 h-3 mr-1" />
            환불
          </span>
        )
      default:
        return null
    }
  }

  const formatCurrency = (amount: number, currency: string = 'KRW') => {
    return new Intl.NumberFormat('ko-KR', {
      style: 'currency',
      currency: currency
    }).format(amount)
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleString('ko-KR')
  }

  const exportPayments = () => {
    // CSV export logic
    console.log('Exporting payments...')
  }

  return (
    <AdminLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 flex items-center">
              <CreditCard className="h-8 w-8 mr-3 text-green-600" />
              결제 관리
            </h1>
            <p className="text-gray-600">결제 내역을 확인하고 관리하세요.</p>
          </div>
          <button
            onClick={exportPayments}
            className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
          >
            <Download className="h-4 w-4 mr-2" />
            내보내기
          </button>
        </div>

        {/* Filters */}
        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">상태</label>
              <select
                value={statusFilter}
                onChange={(e) => setStatusFilter(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              >
                <option value="">모든 상태</option>
                <option value="completed">완료</option>
                <option value="pending">대기</option>
                <option value="failed">실패</option>
                <option value="refunded">환불</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">시작일</label>
              <input
                type="date"
                value={dateFrom}
                onChange={(e) => setDateFrom(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">종료일</label>
              <input
                type="date"
                value={dateTo}
                onChange={(e) => setDateTo(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div className="flex items-end">
              <button
                onClick={() => refetch()}
                className="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
              >
                필터 적용
              </button>
            </div>
          </div>
        </div>

        {/* Summary Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div className="bg-white p-6 rounded-lg shadow-sm border">
            <div className="flex items-center">
              <div className="p-3 bg-green-100 rounded-full">
                <CheckCircle className="h-6 w-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">완료된 결제</p>
                <p className="text-2xl font-bold text-gray-900">
                  {payments?.filter((p: any) => p.status === 'completed').length || 0}
                </p>
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg shadow-sm border">
            <div className="flex items-center">
              <div className="p-3 bg-yellow-100 rounded-full">
                <Clock className="h-6 w-6 text-yellow-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">대기 중</p>
                <p className="text-2xl font-bold text-gray-900">
                  {payments?.filter((p: any) => p.status === 'pending').length || 0}
                </p>
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg shadow-sm border">
            <div className="flex items-center">
              <div className="p-3 bg-red-100 rounded-full">
                <XCircle className="h-6 w-6 text-red-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">실패</p>
                <p className="text-2xl font-bold text-gray-900">
                  {payments?.filter((p: any) => p.status === 'failed').length || 0}
                </p>
              </div>
            </div>
          </div>

          <div className="bg-white p-6 rounded-lg shadow-sm border">
            <div className="flex items-center">
              <div className="p-3 bg-blue-100 rounded-full">
                <CreditCard className="h-6 w-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">총 거래액</p>
                <p className="text-2xl font-bold text-gray-900">
                  {formatCurrency(
                    payments?.filter((p: any) => p.status === 'completed')
                      .reduce((sum: number, p: any) => sum + p.amount, 0) || 0
                  )}
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Payments Table */}
        <div className="bg-white shadow-sm border rounded-lg overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    거래 ID
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    사용자
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    금액
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    결제 방법
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    상태
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    생성일
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {payments?.map((payment: any) => (
                  <tr key={payment.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      #{payment.transaction_id || payment.id}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      사용자 ID: {payment.user_id}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                      {formatCurrency(payment.amount, payment.currency)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {payment.payment_method || '미지정'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getStatusBadge(payment.status)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatDate(payment.created_at)}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </AdminLayout>
  )
}




==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\app\admin\system\page.tsx
==================================================
 



==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\app\admin\users\page.tsx
==================================================
// app/admin/users/page.tsx
'use client'

import { useState } from 'react'
import { useQuery } from '@tanstack/react-query'
import AdminLayout from '@/components/layout/admin-layout'
import { adminAPI } from '@/lib/api'
import { Search, Edit, Ban, CheckCircle, XCircle, Users, UserPlus } from 'lucide-react'
import clsx from 'clsx'
import toast from 'react-hot-toast'

export default function UsersPage() {
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedRole, setSelectedRole] = useState('')
  const [currentPage, setCurrentPage] = useState(1)
  const pageSize = 20

  const { data, isLoading, refetch } = useQuery({
    queryKey: ['users', { 
      skip: (currentPage - 1) * pageSize, 
      limit: pageSize, 
      search: searchTerm || undefined,
      role: selectedRole || undefined 
    }],
    queryFn: () => adminAPI.getUsers({ 
      skip: (currentPage - 1) * pageSize, 
      limit: pageSize, 
      search: searchTerm || undefined,
      role: selectedRole || undefined 
    }),
  })

  const handleRoleChange = async (userId: number, role: string, isActive: boolean) => {
    try {
      await adminAPI.updateUser(userId, { role: role as any, is_active: isActive })
      refetch()
      toast.success('사용자 정보가 업데이트되었습니다.')
    } catch (error) {
      console.error('Failed to update user:', error)
    }
  }

  const getRoleBadgeColor = (role: string) => {
    switch (role) {
      case 'admin': return 'bg-red-100 text-red-800'
      case 'premium': return 'bg-purple-100 text-purple-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ko-KR')
  }

  return (
    <AdminLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-900 flex items-center">
              <Users className="h-8 w-8 mr-3 text-blue-600" />
              회원 관리
            </h1>
            <p className="text-gray-600">
              전체 {data?.total || 0}명의 사용자 중 {data?.users?.length || 0}명 표시
            </p>
          </div>
          <button className="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
            <UserPlus className="h-4 w-4 mr-2" />
            새 사용자 추가
          </button>
        </div>

        {/* Filters */}
        <div className="bg-white p-6 rounded-lg shadow-sm border">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="이메일 또는 사용자명 검색..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
              />
            </div>
            
            <select
              value={selectedRole}
              onChange={(e) => setSelectedRole(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
            >
              <option value="">모든 권한</option>
              <option value="admin">관리자</option>
              <option value="premium">프리미엄</option>
              <option value="user">일반 사용자</option>
            </select>

            <button
              onClick={() => refetch()}
              className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors"
            >
              검색
            </button>
          </div>
        </div>

        {/* Users Table */}
        <div className="bg-white shadow-sm border rounded-lg overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    사용자
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    권한
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    상태
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    가입일
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    최근 로그인
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    작업
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {data?.users?.map((user: any) => (
                  <tr key={user.id} className="hover:bg-gray-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="flex-shrink-0 h-10 w-10">
                          <div className="h-10 w-10 bg-blue-500 rounded-full flex items-center justify-center">
                            <span className="text-white text-sm font-medium">
                              {user.username?.charAt(0).toUpperCase()}
                            </span>
                          </div>
                        </div>
                        <div className="ml-4">
                          <div className="text-sm font-medium text-gray-900">
                            {user.full_name || user.username}
                          </div>
                          <div className="text-sm text-gray-500">{user.email}</div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={clsx(
                        'inline-flex px-2 py-1 text-xs font-semibold rounded-full',
                        getRoleBadgeColor(user.role)
                      )}>
                        {user.role === 'admin' ? '관리자' : 
                         user.role === 'premium' ? '프리미엄' : '일반'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {user.is_active ? (
                        <span className="inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
                          <CheckCircle className="w-3 h-3 mr-1" />
                          활성
                        </span>
                      ) : (
                        <span className="inline-flex items-center px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">
                          <XCircle className="w-3 h-3 mr-1" />
                          비활성
                        </span>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {formatDate(user.created_at)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {user.last_login ? formatDate(user.last_login) : '없음'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex space-x-2">
                        <button
                          onClick={() => handleRoleChange(user.id, user.role, !user.is_active)}
                          className={clsx(
                            'p-2 rounded-md transition-colors',
                            user.is_active 
                              ? 'text-red-600 hover:bg-red-50' 
                              : 'text-green-600 hover:bg-green-50'
                          )}
                          title={user.is_active ? '비활성화' : '활성화'}
                        >
                          {user.is_active ? <Ban className="h-4 w-4" /> : <CheckCircle className="h-4 w-4" />}
                        </button>
                        <button
                          className="p-2 text-blue-600 hover:bg-blue-50 rounded-md transition-colors"
                          title="편집"
                        >
                          <Edit className="h-4 w-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </AdminLayout>
  )
} 



==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\app\login\page.tsx
==================================================
// app/login/page.tsx
'use client'

import { useState } from 'react'
import { useAuth } from '@/lib/auth-context'
import { useRouter } from 'next/navigation'
import { useForm } from 'react-hook-form'
import toast from 'react-hot-toast'

interface LoginForm {
  username: string
  password: string
}

export default function LoginPage() {
  const [isSubmitting, setIsSubmitting] = useState(false)
  const { login } = useAuth()
  const router = useRouter()
  const { register, handleSubmit, formState: { errors } } = useForm<LoginForm>()

  const onSubmit = async (data: LoginForm) => {
    setIsSubmitting(true)
    try {
      await login(data.username, data.password)
      toast.success('로그인 성공!')
      router.push('/admin')
    } catch (err: any) {
      toast.error(err.response?.data?.detail || '로그인에 실패했습니다.')
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-indigo-100 py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <div className="mx-auto h-12 w-12 bg-blue-600 rounded-xl flex items-center justify-center">
            <Settings className="h-6 w-6 text-white" />
          </div>
          <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
            관리자 로그인
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            퀀트 전략 플랫폼 관리 시스템
          </p>
        </div>
        
        <form className="mt-8 space-y-6" onSubmit={handleSubmit(onSubmit)}>
          <div className="space-y-4">
            <div>
              <label htmlFor="username" className="block text-sm font-medium text-gray-700">
                사용자명
              </label>
              <input
                {...register('username', { required: '사용자명을 입력해주세요.' })}
                type="text"
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                placeholder="사용자명을 입력하세요"
              />
              {errors.username && (
                <p className="mt-1 text-sm text-red-600">{errors.username.message}</p>
              )}
            </div>
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">
                비밀번호
              </label>
              <input
                {...register('password', { required: '비밀번호를 입력해주세요.' })}
                type="password"
                className="mt-1 appearance-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 focus:z-10 sm:text-sm"
                placeholder="비밀번호를 입력하세요"
              />
              {errors.password && (
                <p className="mt-1 text-sm text-red-600">{errors.password.message}</p>
              )}
            </div>
          </div>

          <div>
            <button
              type="submit"
              disabled={isSubmitting}
              className="group relative w-full flex justify-center py-3 px-4 border border-transparent text-sm font-medium rounded-lg text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {isSubmitting ? (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
              ) : (
                '로그인'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
} 



==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\components\dashboard\quick-actions.tsx
==================================================
// components/dashboard/quick-actions.tsx
import Link from 'next/link'
import { Users, DollarSign, TrendingUp, UserCheck, Settings, Shield } from 'lucide-react'

const actions = [
  {
    title: '회원 관리',
    href: '/admin/users',
    icon: Users,
    color: 'text-blue-600',
    bgColor: 'hover:bg-blue-50'
  },
              <div className="text-center">
                <p className="text-3xl font-bold text-orange-600">
                  {churnAnalysis.churn_rate?.toFixed(1)}%
                </p>
                <p className="text-sm text-gray-600">이탈률</p>
              </div>
              
              <div className="text-center">
                <p className="text-3xl font-bold text-blue-600">
                  {churnAnalysis.analysis_period}
                </p>
                <p className="text-sm text-gray-600">분석 기간</p>
              </div>
            </div>
          ) : (
            <div className="h-32 flex items-center justify-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
            </div>
          )}
        </div>
      </div>
    </AdminLayout>
  )
}


==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\components\dashboard\revenue-chart.tsx
==================================================
// components/dashboard/revenue-chart.tsx
'use client'

import { useQuery } from '@tanstack/react-query'
import { adminAPI } from '@/lib/api'
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'

export default function RevenueChart() {
  const { data: revenueData, isLoading } = useQuery({
    queryKey: ['revenueChart'],
    queryFn: () => adminAPI.getRevenueChart(30),
  })

  const formatCurrency = (value: number) => {
    return new Intl.NumberFormat('ko-KR', {
      style: 'currency',
      currency: 'KRW'
    }).format(value)
  }

  return (
    <div className="bg-white p-6 rounded-lg shadow-sm border">
      <h3 className="text-lg font-medium text-gray-900 mb-4">
        일별 수익 현황 (최근 30일)
      </h3>
      {!isLoading && revenueData ? (
        <ResponsiveContainer width="100%" height={300}>
          <LineChart data={revenueData}>
            <CartesianGrid strokeDasharray="3 3" />
            <XAxis 
              dataKey="date" 
              tick={{ fontSize: 12 }}
            />
            <YAxis tick={{ fontSize: 12 }} />
            <Tooltip 
              labelFormatter={(date) => `날짜: ${date}`}
              formatter={(value: number) => [formatCurrency(value), '수익']}
            />
            <Line 
              type="monotone" 
              dataKey="revenue" 
              stroke="#3B82F6" 
              strokeWidth={2}
              dot={{ fill: '#3B82F6' }}
            />
          </LineChart>
        </ResponsiveContainer>
      ) : (
        <div className="h-72 flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      )}
    </div>
  )
}


==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\hooks\useWebSocket.ts
==================================================
// hooks/useWebSocket.ts
'use client'

import { useEffect, useRef, useState } from 'react'
import toast from 'react-hot-toast'

export const useWebSocket = (url: string) => {
  const [isConnected, setIsConnected] = useState(false)
  const [messages, setMessages] = useState<any[]>([])
  const ws = useRef<WebSocket | null>(null)

  useEffect(() => {
    const connectWebSocket = () => {
      ws.current = new WebSocket(url)

      ws.current.onopen = () => {
        setIsConnected(true)
        console.log('WebSocket connected')
      }

      ws.current.onmessage = (event) => {
        try {
          const data = JSON.parse(event.data)
          setMessages(prev => [data, ...prev.slice(0, 49)])
          
          if (data.type === 'new_alert') {
            toast.error(`새로운 알림: ${data.alert.title}`)
          } else if (data.type === 'alert_resolved') {
            toast.success('알림이 해결되었습니다.')
          }
        } catch (error) {
          console.error('Error parsing WebSocket message:', error)
        }
      }

      ws.current.onclose = () => {
        setIsConnected(false)
        console.log('WebSocket disconnected')
        setTimeout(connectWebSocket, 5000)
      }

      ws.current.onerror = (error) => {
        console.error('WebSocket error:', error)
        setIsConnected(false)
      }
    }

    connectWebSocket()

    return () => {
      if (ws.current) {
        ws.current.close()
      }
    }
  }, [url])

  const sendMessage = (message: any) => {
    if (ws.current && isConnected) {
      ws.current.send(JSON.stringify(message))
    }
  }

  return { isConnected, messages, sendMessage }
} 



==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\lib\api.ts
==================================================
 



==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\lib\auth-context.tsx
==================================================




==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\lib\supabase.ts
==================================================
 



==================================================
File: C:\Aproject\system_admin\quant-admin-dashboard\types\index.ts
==================================================
// types/index.ts
export interface User {
  id: number;
  email: string;
  username: string;
  full_name?: string;
  role: 'admin' | 'user' | 'premium';
  is_active: boolean;
  created_at: string;
  last_login?: string;
}

export interface UserList {
  users: User[];
  total: number;
  page: number;
  size: number;
}

export interface Payment {
  id: number;
  user_id: number;
  amount: number;
  currency: string;
  status: 'pending' | 'completed' | 'failed' | 'refunded';
  payment_method?: string;
  transaction_id?: string;
  created_at: string;
  completed_at?: string;
}

export interface DashboardStats {
  total_users: number;
  active_users: number;
  total_revenue: number;
  monthly_revenue: number;
  new_users_today: number;
  active_subscriptions: number;
}

export interface RevenueData {
  date: string;
  revenue: number;
}

export interface UserGrowthData {
  date: string;
  signups: number;
}



