
==================================================
File: C:\Aproject\quant_platform\src\app\member_payment\layout.tsx
==================================================
//file: src/app/member_payment/layout.tsx

import type { Metadata } from 'next'
import './payment.css'

export const metadata: Metadata = {
  title: '멤버십 - Intelliquant',
  description: '나에게 필요한 기능과 혜택에 맞는 멤버십에 가입해 보세요',
}

export default function MemberPaymentLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="min-h-screen bg-gray-900">
      {children}
    </div>
  )
}



==================================================
File: C:\Aproject\quant_platform\src\app\member_payment\page.tsx
==================================================
'use client'

import { useState } from 'react'

export default function MembershipPage() {
  const [isMonthly, setIsMonthly] = useState(true)

  const plans = [
    {
      name: 'Basic',
      subtitle: 'Free',
      price: 0,
      popular: false,
      headerColor: 'bg-gradient-to-r from-blue-600 to-green-500'
    },
    {
      name: 'Advanced',
      subtitle: '실전 퀀트 투자를 위한 핵심 기능',
      price: 9900,
      popular: false,
      headerColor: 'bg-gray-700'
    },
    {
      name: 'Premium',
      subtitle: '프리미엄 투자 전략과 고급 분석',
      price: 19900,
      popular: true,
      headerColor: 'bg-gray-700'
    }
  ]

  const features = [
    {
      name: '백테스트 기간',
      basic: '약 5년\n(5년 전 ~ 1개월 전)',
      advanced: '한국: 2000년 ~ 현재\n미국: 2010년 ~ 현재',
      premium: '한국: 2000년 ~ 현재\n미국: 2010년 ~ 현재'
    },
    {
      name: '알고리즘 동시 실행 개수',
      basic: '2',
      advanced: '2',
      premium: '2'
    },
    {
      name: '1일 백테스트 횟수',
      basic: '50회',
      advanced: '100회',
      premium: '100회'
    },
    {
      name: '실행 개수\n(만매/구독 알고리즘)',
      basic: '1 (제한적)',
      advanced: '3',
      premium: '3'
    },
    {
      name: '자동매매 연동 (나무증권)',
      basic: 'O',
      advanced: 'O',
      premium: 'O'
    },
    {
      name: '커뮤니티 토론방',
      basic: 'O',
      advanced: 'O',
      premium: 'O'
    },
    {
      name: '이메일 문의',
      basic: 'O',
      advanced: 'O',
      premium: 'O'
    },
    {
      name: '채널톡 상담',
      basic: '단순 문의',
      advanced: '단순 문의',
      premium: '단순 문의'
    }
  ]

  const getDiscountedPrice = (price: number) => {
    return Math.floor(price * 0.9)
  }

  const handlePayment = (planName: string, isMonthly: boolean, basePrice: number) => {
    const finalPrice = isMonthly ? basePrice : getDiscountedPrice(basePrice)
    const period = isMonthly ? 'monthly' : 'quarterly'
    
    // 결제 모듈로 이동 (실제 구현에서는 결제 서비스 API 연동)
    const paymentData = {
      planName,
      period,
      price: finalPrice,
      billingCycle: isMonthly ? 1 : 3
    }
    
    // 방법 1: 쿼리 파라미터로 결제 정보 전달
    const searchParams = new URLSearchParams({
      plan: planName.toLowerCase(),
      period: period,
      price: finalPrice.toString()
    })
    
    // 결제 페이지로 이동
    window.location.href = `/payment?${searchParams.toString()}`
    
    // 방법 2: 외부 결제 서비스 (예: 토스페이먼츠, 아임포트 등)
    // 실제 결제 모듈 연동시 사용
    // window.open(`https://payment-service.com/checkout?${searchParams.toString()}`, '_blank')
  }

  return (
    <div className="min-h-screen bg-gray-900 py-12">
      <div className="max-w-7xl mx-auto px-6">
        {/* Header */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-white mb-4">Membership</h1>
          <p className="text-gray-300 text-lg">
            나에게 필요한 기능과 혜택에 맞는 멤버십에 가입해 보세요.
          </p>
        </div>

        {/* Billing Toggle */}
        <div className="flex justify-center mb-12">
          <div className="bg-gray-800 rounded-full p-1 flex">
            <button
              onClick={() => setIsMonthly(true)}
              className={`px-6 py-3 rounded-full font-medium transition-all duration-200 ${
                isMonthly 
                  ? 'bg-green-600 text-white' 
                  : 'text-gray-300 hover:text-white'
              }`}
            >
              월 결제
            </button>
            <button
              onClick={() => setIsMonthly(false)}
              className={`px-6 py-3 rounded-full font-medium transition-all duration-200 ${
                !isMonthly 
                  ? 'bg-green-600 text-white' 
                  : 'text-gray-300 hover:text-white'
              }`}
            >
              3개월 결제
            </button>
          </div>
          {!isMonthly && (
            <div className="ml-4 flex items-center">
              <span className="text-green-400 font-semibold">10% 할인!</span>
            </div>
          )}
        </div>

        {/* Pricing Table */}
        <div className="bg-gray-800 rounded-xl overflow-hidden shadow-2xl">
          {/* Header Row */}
          <div className="grid grid-cols-4 bg-gray-700">
            <div className="p-6">
              <h3 className="text-white font-semibold text-lg">기능</h3>
            </div>
            {plans.map((plan, index) => (
              <div key={index} className={`p-6 ${plan.headerColor} relative`}>
                {plan.popular && (
                  <div className="absolute -top-3 left-1/2 transform -translate-x-1/2">
                    <span className="bg-orange-500 text-white text-xs px-3 py-1 rounded-full">
                      인기
                    </span>
                  </div>
                )}
                <div className="text-white">
                  <h3 className="font-bold text-xl mb-1">{plan.name}</h3>
                  <p className="text-sm opacity-90 mb-3">{plan.subtitle}</p>
                  <div className="text-2xl font-bold">
                    {plan.price === 0 ? (
                      <span>Free</span>
                    ) : (
                      <button
                        onClick={() => handlePayment(plan.name, isMonthly, plan.price)}
                        className="hover:bg-white/10 rounded-lg px-3 py-2 transition-colors duration-200 cursor-pointer"
                      >
                        {isMonthly ? (
                          `${plan.price.toLocaleString()}원/월`
                        ) : (
                          <>
                            <div className="line-through text-lg opacity-70">
                              {plan.price.toLocaleString()}원/월
                            </div>
                            <div>{getDiscountedPrice(plan.price).toLocaleString()}원/월</div>
                          </>
                        )}
                      </button>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>

          {/* Feature Rows */}
          {features.map((feature, index) => (
            <div key={index} className={`grid grid-cols-4 border-t border-gray-700 ${
              index % 2 === 0 ? 'bg-gray-800' : 'bg-gray-750'
            }`}>
              <div className="p-4 border-r border-gray-700">
                <span className="text-white font-medium whitespace-pre-line">
                  {feature.name}
                </span>
              </div>
              <div className="p-4 border-r border-gray-700 text-center">
                <span className="text-gray-300 whitespace-pre-line">
                  {feature.basic}
                </span>
              </div>
              <div className="p-4 border-r border-gray-700 text-center">
                <span className="text-gray-300 whitespace-pre-line">
                  {feature.advanced}
                </span>
              </div>
              <div className="p-4 text-center">
                <span className="text-gray-300 whitespace-pre-line">
                  {feature.premium}
                </span>
              </div>
            </div>
          ))}

          {/* Action Buttons */}
          <div className="grid grid-cols-4 bg-gray-700 border-t border-gray-600">
            <div className="p-6"></div>
            {plans.map((plan, index) => (
              <div key={index} className="p-6">
                {plan.price === 0 ? (
                  <button className="w-full py-3 px-4 rounded-lg font-semibold transition-colors duration-200 bg-gray-600 text-white hover:bg-gray-500 cursor-default">
                    현재 플랜
                  </button>
                ) : (
                  <button 
                    onClick={() => handlePayment(plan.name, isMonthly, plan.price)}
                    className="w-full py-3 px-4 rounded-lg font-semibold transition-colors duration-200 bg-green-600 text-white hover:bg-green-500"
                  >
                    선택하기
                  </button>
                )}
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}


==================================================
File: C:\Aproject\quant_platform\src\app\member_payment\payment\page.tsx
==================================================
'use client'

import { useState, useEffect } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import Link from 'next/link'
import { CheckCircle, ArrowRight, Home, CreditCard } from 'lucide-react'

interface PaymentResult {
  orderId: string
  orderName: string
  totalAmount: number
  method: string
  approvedAt: string
  card?: {
    company: string
    number: string
  }
  receipt?: {
    url: string
  }
}

export default function PaymentSuccessPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const [paymentResult, setPaymentResult] = useState<PaymentResult | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const paymentKey = searchParams.get('paymentKey')
    const orderId = searchParams.get('orderId')
    const amount = searchParams.get('amount')

    if (paymentKey && orderId && amount) {
      confirmPayment(paymentKey, orderId, amount)
    } else {
      // URL 파라미터가 없는 경우 모의 데이터로 처리
      setPaymentResult({
        orderId: 'order_1234567890',
        orderName: 'Premium 플랜 - 월간',
        totalAmount: 21890,
        method: '카드',
        approvedAt: new Date().toISOString(),
        card: {
          company: '신한',
          number: '**** **** **** 1234'
        }
      })
      setLoading(false)
    }
  }, [searchParams])

  const confirmPayment = async (paymentKey: string, orderId: string, amount: string) => {
    try {
      // 실제 환경에서는 서버 API를 호출해야 함
      const response = await fetch('/api/payment/confirm', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          paymentKey,
          orderId,
          amount: parseInt(amount)
        })
      })

      if (response.ok) {
        const result = await response.json()
        if (result.success) {
          setPaymentResult(result.data)
        } else {
          console.error('결제 승인 실패:', result.error)
          router.push('/member_payment/payment/fail?error=' + encodeURIComponent(result.error))
        }
      } else {
        throw new Error('서버 응답 오류')
      }
    } catch (error) {
      console.error('결제 승인 요청 실패:', error)
      
      // API가 없는 경우 모의 성공 데이터 사용
      setPaymentResult({
        orderId: orderId,
        orderName: 'Premium 플랜 - 월간',
        totalAmount: parseInt(amount),
        method: '카드',
        approvedAt: new Date().toISOString(),
        card: {
          company: '신한',
          number: '**** **** **** 1234'
        }
      })
    } finally {
      setLoading(false)
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleString('ko-KR', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    })
  }

  const getPaymentMethodName = (method: string) => {
    const methods: { [key: string]: string } = {
      '카드': '신용/체크카드',
      '가상계좌': '가상계좌',
      '계좌이체': '실시간 계좌이체',
      '휴대폰': '휴대폰 소액결제'
    }
    return methods[method] || method
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-white text-lg">결제를 승인하는 중입니다...</p>
          <p className="text-gray-400 text-sm mt-2">잠시만 기다려주세요</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-900 py-12">
      <div className="max-w-2xl mx-auto px-6">
        <div className="bg-gray-800 rounded-xl p-8 text-center">
          {/* Success Icon */}
          <div className="mb-6">
            <CheckCircle className="w-20 h-20 text-green-500 mx-auto mb-4" />
            <h1 className="text-3xl font-bold text-white mb-2">결제가 완료되었습니다!</h1>
            <p className="text-gray-300">
              Intelliquant 서비스를 이용해 주셔서 감사합니다.
            </p>
          </div>

          {/* Payment Details */}
          {paymentResult && (
            <div className="bg-gray-700 rounded-lg p-6 mb-8 text-left">
              <h3 className="text-white font-semibold text-lg mb-4 flex items-center">
                <CreditCard className="w-5 h-5 mr-2" />
                결제 상세내역
              </h3>
              
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-300">주문번호</span>
                  <span className="text-white font-mono text-sm">{paymentResult.orderId}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">결제상품</span>
                  <span className="text-white">{paymentResult.orderName}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">결제금액</span>
                  <span className="text-white font-semibold">{paymentResult.totalAmount?.toLocaleString()}원</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">결제수단</span>
                  <span className="text-white">
                    {getPaymentMethodName(paymentResult.method)}
                    {paymentResult.card && ` (${paymentResult.card.company} ${paymentResult.card.number})`}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">결제일시</span>
                  <span className="text-white">{formatDate(paymentResult.approvedAt)}</span>
                </div>
                {paymentResult.receipt && (
                  <div className="pt-3 border-t border-gray-600">
                    <a 
                      href={paymentResult.receipt.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-400 hover:text-blue-300 text-sm underline"
                    >
                      영수증 확인하기 →
                    </a>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Service Information */}
          <div className="bg-green-600/10 border border-green-600/20 rounded-lg p-6 mb-8">
            <h3 className="text-green-400 font-semibold mb-3">🎉 서비스 이용 안내</h3>
            <ul className="text-gray-300 text-sm space-y-2 text-left">
              <li>• 결제 완료와 동시에 선택하신 플랜으로 업그레이드되었습니다</li>
              <li>• 추가된 기능들을 지금 바로 이용하실 수 있습니다</li>
              <li>• 구독 관리는 마이페이지에서 확인 가능합니다</li>
              <li>• 문의사항이 있으시면 고객지원팀으로 연락해 주세요</li>
            </ul>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4">
            <Link href="/dashboard" className="flex-1">
              <button className="w-full bg-blue-600 hover:bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center">
                <ArrowRight className="w-4 h-4 mr-2" />
                서비스 이용하기
              </button>
            </Link>
            
            <Link href="/member_payment" className="flex-1">
              <button className="w-full bg-gray-600 hover:bg-gray-500 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center">
                <Home className="w-4 h-4 mr-2" />
                멤버십 관리
              </button>
            </Link>
          </div>

          {/* Support Information */}
          <div className="mt-8 pt-6 border-t border-gray-600 text-center">
            <p className="text-gray-400 text-sm mb-2">
              결제 관련 문의사항이 있으시면 언제든지 연락해 주세요
            </p>
            <div className="flex justify-center space-x-6 text-sm">
              <a href="mailto:support@intelliquant.ai" className="text-blue-400 hover:text-blue-300">
                support@intelliquant.ai
              </a>
              <span className="text-gray-500">|</span>
              <a href="tel:02-1234-5678" className="text-blue-400 hover:text-blue-300">
                02-1234-5678
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}


==================================================
File: C:\Aproject\quant_platform\src\app\member_payment\payment\fail\page.tsx
==================================================
'use client'

import { useSearchParams } from 'next/navigation'
import Link from 'next/link'
import { XCircle, ArrowLeft, RefreshCw, HelpCircle } from 'lucide-react'

export default function PaymentFailPage() {
  const searchParams = useSearchParams()
  const errorMessage = searchParams.get('message') || searchParams.get('error') || '결제 처리 중 오류가 발생했습니다'
  const errorCode = searchParams.get('code')

  const getErrorDescription = (message: string, code: string | null) => {
    const errorMap: { [key: string]: string } = {
      'CARD_COMPANY_NOT_AVAILABLE': '카드사 서비스가 일시적으로 중단되었습니다',
      'EXCEED_MAX_CARD_INSTALLMENT_PLAN': '설정 가능한 할부 개월 수를 초과했습니다',
      'INVALID_CARD_EXPIRATION': '카드 유효기간이 잘못되었습니다',
      'INVALID_STOPPED_CARD': '정지된 카드입니다',
      'LIMIT_EXCEEDED': '한도를 초과했습니다',
      'CARD_NOT_SUPPORTED': '지원하지 않는 카드입니다',
      'INVALID_CARD_NUMBER': '카드번호가 잘못되었습니다'
    }

    if (code && errorMap[code]) {
      return errorMap[code]
    }

    if (message.includes('한도')) return '카드 한도를 확인해 주세요'
    if (message.includes('승인')) return '카드 승인이 거절되었습니다'
    if (message.includes('취소')) return '사용자가 결제를 취소했습니다'
    
    return message
  }

  const getSolution = (message: string, code: string | null) => {
    if (code === 'CARD_COMPANY_NOT_AVAILABLE') {
      return '잠시 후 다시 시도하거나 다른 카드를 이용해 주세요'
    }
    if (code === 'LIMIT_EXCEEDED') {
      return '카드 한도를 확인하시거나 다른 결제수단을 이용해 주세요'
    }
    if (code?.includes('CARD')) {
      return '카드 정보를 다시 확인하시거나 다른 카드로 시도해 주세요'
    }
    if (message.includes('취소')) {
      return '결제를 계속 진행하시려면 다시 시도해 주세요'
    }
    
    return '잠시 후 다시 시도하시거나 고객지원팀에 문의해 주세요'
  }

  return (
    <div className="min-h-screen bg-gray-900 py-12">
      <div className="max-w-2xl mx-auto px-6">
        <div className="bg-gray-800 rounded-xl p-8 text-center">
          {/* Error Icon */}
          <div className="mb-6">
            <XCircle className="w-20 h-20 text-red-500 mx-auto mb-4" />
            <h1 className="text-3xl font-bold text-white mb-2">결제에 실패했습니다</h1>
            <p className="text-gray-300">
              결제 처리 중 문제가 발생했습니다
            </p>
          </div>

          {/* Error Details */}
          <div className="bg-red-600/10 border border-red-600/20 rounded-lg p-6 mb-8">
            <div className="text-left space-y-4">
              <div>
                <h3 className="text-red-400 font-semibold mb-2">오류 내용</h3>
                <p className="text-gray-300">{getErrorDescription(errorMessage, errorCode)}</p>
                {errorCode && (
                  <p className="text-gray-500 text-sm mt-1">오류 코드: {errorCode}</p>
                )}
              </div>
              
              <div>
                <h3 className="text-red-400 font-semibold mb-2">해결 방법</h3>
                <p className="text-gray-300">{getSolution(errorMessage, errorCode)}</p>
              </div>
            </div>
          </div>

          {/* Common Solutions */}
          <div className="bg-gray-700 rounded-lg p-6 mb-8 text-left">
            <h3 className="text-white font-semibold mb-4 flex items-center">
              <HelpCircle className="w-5 h-5 mr-2" />
              자주 발생하는 문제 해결방법
            </h3>
            
            <ul className="text-gray-300 space-y-2 text-sm">
              <li>• <strong>카드 한도 부족:</strong> 카드사에 문의하여 한도를 확인해 주세요</li>
              <li>• <strong>해외결제 차단:</strong> 카드사에 해외결제 허용을 요청해 주세요</li>
              <li>• <strong>카드 정보 오류:</strong> 카드번호, 유효기간, CVC를 다시 확인해 주세요</li>
              <li>• <strong>일시적 오류:</strong> 5-10분 후 다시 시도해 주세요</li>
              <li>• <strong>브라우저 문제:</strong> 캐시를 삭제하거나 다른 브라우저를 이용해 보세요</li>
            </ul>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4 mb-8">
            <Link href="/member_payment/payment" className="flex-1">
              <button className="w-full bg-blue-600 hover:bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center">
                <RefreshCw className="w-4 h-4 mr-2" />
                다시 결제하기
              </button>
            </Link>
            
            <Link href="/member_payment" className="flex-1">
              <button className="w-full bg-gray-600 hover:bg-gray-500 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center">
                <ArrowLeft className="w-4 h-4 mr-2" />
                멤버십으로 돌아가기
              </button>
            </Link>
          </div>

          {/* Support Information */}
          <div className="pt-6 border-t border-gray-600 text-center">
            <p className="text-gray-400 text-sm mb-4">
              문제가 계속 발생하면 고객지원팀으로 연락해 주세요
            </p>
            
            <div className="bg-gray-700 rounded-lg p-4">
              <h4 className="text-white font-medium mb-3">고객지원</h4>
              <div className="flex flex-col sm:flex-row justify-center items-center space-y-2 sm:space-y-0 sm:space-x-6 text-sm">
                <a 
                  href="mailto:support@intelliquant.ai" 
                  className="text-blue-400 hover:text-blue-300 flex items-center"
                >
                  📧 support@intelliquant.ai
                </a>
                <a 
                  href="tel:02-1234-5678" 
                  className="text-blue-400 hover:text-blue-300 flex items-center"
                >
                  📞 02-1234-5678
                </a>
              </div>
              <p className="text-gray-400 text-xs mt-2">
                평일 09:00 - 18:00 (주말 및 공휴일 제외)
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}


==================================================
File: C:\Aproject\quant_platform\src\app\member_payment\payment\success\page.tsx
==================================================
'use client'

import { useState, useEffect } from 'react'
import { useSearchParams, useRouter } from 'next/navigation'
import Link from 'next/link'
import { CheckCircle, ArrowRight, Home, CreditCard } from 'lucide-react'

export default function PaymentSuccessPage() {
  const searchParams = useSearchParams()
  const router = useRouter()
  const [paymentResult, setPaymentResult] = useState(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const paymentKey = searchParams.get('paymentKey')
    const orderId = searchParams.get('orderId')
    const amount = searchParams.get('amount')

    if (paymentKey && orderId && amount) {
      confirmPayment(paymentKey, orderId, amount)
    } else {
      setLoading(false)
    }
  }, [searchParams])

  const confirmPayment = async (paymentKey: string, orderId: string, amount: string) => {
    try {
      const response = await fetch('/api/payment/confirm', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          paymentKey,
          orderId,
          amount: parseInt(amount)
        })
      })

      const result = await response.json()
      
      if (result.success) {
        setPaymentResult(result.data)
      } else {
        console.error('결제 승인 실패:', result.error)
        router.push('/payment/fail?error=' + encodeURIComponent(result.error))
      }
    } catch (error) {
      console.error('결제 승인 요청 실패:', error)
      router.push('/payment/fail?error=' + encodeURIComponent('결제 승인 중 오류가 발생했습니다'))
    } finally {
      setLoading(false)
    }
  }

  const formatDate = (dateString: string) => {
    const date = new Date(dateString)
    return date.toLocaleString('ko-KR', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    })
  }

  const getPaymentMethodName = (method: string) => {
    const methods = {
      '카드': '신용/체크카드',
      '가상계좌': '가상계좌',
      '계좌이체': '실시간 계좌이체',
      '휴대폰': '휴대폰 소액결제'
    }
    return methods[method as keyof typeof methods] || method
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-white text-lg">결제를 승인하는 중입니다...</p>
          <p className="text-gray-400 text-sm mt-2">잠시만 기다려주세요</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-900 py-12">
      <div className="max-w-2xl mx-auto px-6">
        <div className="bg-gray-800 rounded-xl p-8 text-center">
          {/* Success Icon */}
          <div className="mb-6">
            <CheckCircle className="w-20 h-20 text-green-500 mx-auto mb-4" />
            <h1 className="text-3xl font-bold text-white mb-2">결제가 완료되었습니다!</h1>
            <p className="text-gray-300">
              Intelliquant 서비스를 이용해 주셔서 감사합니다.
            </p>
          </div>

          {/* Payment Details */}
          {paymentResult && (
            <div className="bg-gray-700 rounded-lg p-6 mb-8 text-left">
              <h3 className="text-white font-semibold text-lg mb-4 flex items-center">
                <CreditCard className="w-5 h-5 mr-2" />
                결제 상세내역
              </h3>
              
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-gray-300">주문번호</span>
                  <span className="text-white font-mono text-sm">{paymentResult.orderId}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">결제상품</span>
                  <span className="text-white">{paymentResult.orderName}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">결제금액</span>
                  <span className="text-white font-semibold">{paymentResult.totalAmount?.toLocaleString()}원</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">결제수단</span>
                  <span className="text-white">
                    {getPaymentMethodName(paymentResult.method)}
                    {paymentResult.card && ` (${paymentResult.card.company} ${paymentResult.card.number})`}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-300">결제일시</span>
                  <span className="text-white">{formatDate(paymentResult.approvedAt)}</span>
                </div>
                {paymentResult.receipt && (
                  <div className="pt-3 border-t border-gray-600">
                    <a 
                      href={paymentResult.receipt.url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-400 hover:text-blue-300 text-sm underline"
                    >
                      영수증 확인하기 →
                    </a>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Service Information */}
          <div className="bg-green-600/10 border border-green-600/20 rounded-lg p-6 mb-8">
            <h3 className="text-green-400 font-semibold mb-3">🎉 서비스 이용 안내</h3>
            <ul className="text-gray-300 text-sm space-y-2 text-left">
              <li>• 결제 완료와 동시에 선택하신 플랜으로 업그레이드되었습니다</li>
              <li>• 추가된 기능들을 지금 바로 이용하실 수 있습니다</li>
              <li>• 구독 관리는 마이페이지에서 확인 가능합니다</li>
              <li>• 문의사항이 있으시면 고객지원팀으로 연락해 주세요</li>
            </ul>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-col sm:flex-row gap-4">
            <Link href="/dashboard" className="flex-1">
              <button className="w-full bg-blue-600 hover:bg-blue-500 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center">
                <ArrowRight className="w-4 h-4 mr-2" />
                서비스 이용하기
              </button>
            </Link>
            
            <Link href="/membership" className="flex-1">
              <button className="w-full bg-gray-600 hover:bg-gray-500 text-white font-semibold py-3 px-6 rounded-lg transition-colors flex items-center justify-center">
                <Home className="w-4 h-4 mr-2" />
                멤버십 관리
              </button>
            </Link>
          </div>

          {/* Support Information */}
          <div className="mt-8 pt-6 border-t border-gray-600 text-center">
            <p className="text-gray-400 text-sm mb-2">
              결제 관련 문의사항이 있으시면 언제든지 연락해 주세요
            </p>
            <div className="flex justify-center space-x-6 text-sm">
              <a href="mailto:support@intelliquant.ai" className="text-blue-400 hover:text-blue-300">
                support@intelliquant.ai
              </a>
              <span className="text-gray-500">|</span>
              <a href="tel:02-1234-5678" className="text-blue-400 hover:text-blue-300">
                02-1234-5678
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

