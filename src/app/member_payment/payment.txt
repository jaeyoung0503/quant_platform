# 토스페이먼츠 연결 가이드

## 📋 연결 과정

### 1. 토스페이먼츠 계정 설정
1. [토스페이먼츠 개발자센터](https://developers.tosspayments.com/) 접속
2. 계정 생성 및 로그인
3. **내 앱 관리** → **앱 생성**
4. 다음 정보 확인/설정:
   - **클라이언트 키** (공개키)
   - **시크릿 키** (비밀키) 
   - **웹훅 URL**: `https://yourdomain.com/api/payment/webhook`
   - **성공 URL**: `https://yourdomain.com/member_payment/payment/success`
   - **실패 URL**: `https://yourdomain.com/member_payment/payment/fail`

### 2. 환경 변수 설정
`.env.local` 파일에 다음 내용 추가:

```env
# 토스페이먼츠 설정
NEXT_PUBLIC_TOSS_CLIENT_KEY=test_ck_xxxxxxxxxxxxxxxx
TOSS_SECRET_KEY=test_sk_xxxxxxxxxxxxxxxx
TOSS_WEBHOOK_SECRET=whsec_xxxxxxxxxxxxxxxx

# 데이터베이스 (선택사항)
DATABASE_URL=your_database_url

# 앱 URL
NEXT_PUBLIC_APP_URL=http://localhost:3000
```

### 3. 의존성 설치

```bash
npm install @tosspayments/payment-sdk
npm install uuid
npm install @types/uuid
```

### 4. 필요한 파일들

아래 파일들을 순서대로 생성해주세요:

1. `lib/toss.ts` - 토스페이먼츠 유틸리티
2. `app/api/payment/prepare/route.ts` - 결제 준비 API
3. `app/api/payment/confirm/route.ts` - 결제 승인 API  
4. `app/api/payment/webhook/route.ts` - 웹훅 처리 API
5. `app/member_payment/payment/page.tsx` - 토스 연동 결제 페이지
6. `components/TossPayment.tsx` - 토스 결제 컴포넌트

### 5. 테스트 카드 정보

**테스트용 카드번호:**
- 4300000000000000 (일반 신용카드)
- 5500000000000000 (해외 신용카드)

**유효기간:** 아무 미래 날짜
**CVC:** 아무 3자리 숫자
**비밀번호:** 아무 2자리 숫자

### 6. 배포 시 주의사항

1. **도메인 등록**: 토스페이먼츠 콘솔에서 실제 도메인 등록
2. **HTTPS 필수**: 실제 결제는 HTTPS에서만 동작
3. **웹훅 보안**: 웹훅 서명 검증 필수
4. **에러 처리**: 모든 결제 단계에서 적절한 에러 처리

## 🔄 결제 플로우

1. **사용자가 "결제하기" 클릭**
2. **결제 준비 API 호출** (`/api/payment/prepare`)
   - 주문 정보 생성 및 DB 저장
   - 결제 고유 ID 생성
3. **토스페이먼츠 결제창 호출**
   - 사용자 카드 정보 입력
4. **결제 승인 요청** (`/api/payment/confirm`)  
   - 토스페이먼츠 서버에서 최종 승인
5. **웹훅 처리** (`/api/payment/webhook`)
   - 결제 상태 변경 알림 처리
6. **성공/실패 페이지로 리디렉션**

## 🛡️ 보안 고려사항

- **시크릿 키는 절대 클라이언트에 노출하지 말 것**
- **모든 결제 승인은 서버에서 처리**
- **웹훅 서명 검증으로 위조 요청 차단**
- **결제 금액은 서버에서 재검증**

# 🚀 토스페이먼츠 연동 설정 가이드

## 1. 패키지 설치

```bash
# 토스페이먼츠 SDK 설치
npm install @tosspayments/payment-sdk

# 유틸리티 패키지
npm install uuid
npm install @types/uuid

# UI 패키지 (이미 설치되어 있다면 생략)
npm install lucide-react
```

## 2. 환경 변수 설정

`.env.local` 파일 생성:

```bash
# .env.local 파일 복사
cp .env.example .env.local
```

토스페이먼츠 개발자센터에서 발급받은 키로 수정:

```bash
NEXT_PUBLIC_TOSS_CLIENT_KEY=test_ck_xxxxxxxxxxxxxxxx
TOSS_SECRET_KEY=test_sk_xxxxxxxxxxxxxxxx
NEXT_PUBLIC_APP_URL=http://localhost:3000
```

## 3. 파일 구조 생성

다음 파일들을 생성해주세요:

```
src/
├── lib/
│   └── toss.ts                    # 토스페이먼츠 유틸리티
├── components/
│   └── TossPayment.tsx            # 토스 결제 컴포넌트
└── app/
    ├── api/
    │   └── payment/
    │       ├── prepare/
    │       │   └── route.ts       # 결제 준비 API
    │       ├── confirm/
    │       │   └── route.ts       # 결제 승인 API
    │       └── webhook/
    │           └── route.ts       # 웹훅 처리 API
    └── member_payment/
        ├── layout.tsx             # 기존 파일
        ├── page.tsx               # 수정된 멤버십 페이지
        └── payment/
            ├── page.tsx           # 토스 연동 결제 페이지
            ├── success/
            │   └── page.tsx       # 결제 성공 페이지
            └── fail/
                └── page.tsx       # 결제 실패 페이지
```

## 4. 토스페이먼츠 개발자센터 설정

### 4.1 앱 생성 및 키 발급
1. [토스페이먼츠 개발자센터](https://developers.tosspayments.com/) 접속
2. 로그인 후 "내 앱 관리" → "앱 생성"
3. 앱 이름, 카테고리 설정
4. **클라이언트 키**와 **시크릿 키** 확인

### 4.2 결제 환경 설정
**결제 성공 URL:**
```
http://localhost:3000/member_payment/payment/success
```

**결제 실패 URL:**
```
http://localhost:3000/member_payment/payment/fail
```

**웹훅 URL:** (선택사항)
```
http://localhost:3000/api/payment/webhook
```

### 4.3 테스트 카드 정보
```
카드번호: 4300000000000000
유효기간: 아무 미래 날짜 (예: 12/25)
CVC: 아무 3자리 숫자 (예: 123)
비밀번호: 아무 2자리 숫자 (예: 00)
```

## 5. 개발 서버 실행

```bash
npm run dev
```

## 6. 테스트 시나리오

### 6.1 정상 결제 테스트
1. `http://localhost:3000/member_payment` 접속
2. Advanced 또는 Premium 플랜 "선택하기" 클릭
3. 결제 페이지에서 카드 정보 입력
4. 테스트 카드로 결제 진행
5. 성공 페이지 확인

### 6.2 결제 실패 테스트
1. 잘못된 카드 정보 입력
2. 실패 페이지 확인

### 6.3 API 테스트
```bash
# 결제 준비 테스트
curl -X POST http://localhost:3000/api/payment/prepare \
  -H "Content-Type: application/json" \
  -d '{
    "planName": "premium",
    "period": "monthly", 
    "amount": 19900
  }'

# 주문 조회 테스트  
curl "http://localhost:3000/api/payment/prepare?orderId=order_xxxxxxx"
```

## 7. 운영 배포 시 체크리스트

### 7.1 환경 변수 업데이트
```bash
NEXT_PUBLIC_TOSS_CLIENT_KEY=live_ck_xxxxxxxxxxxxxxxx  # 운영 키로 변경
TOSS_SECRET_KEY=live_sk_xxxxxxxxxxxxxxxx              # 운영 키로 변경
NEXT_PUBLIC_APP_URL=https://yourdomain.com            # 실제 도메인으로 변경
```

### 7.2 토스페이먼츠 콘솔 설정
- 실제 도메인으로 결제 URL 업데이트
- 웹훅 URL을 HTTPS로 설정
- 라이브 키 활성화

### 7.3 보안 체크
- [ ] 시크릿 키가 클라이언트에 노출되지 않는지 확인
- [ ] 웹훅 서명 검증 활성화
- [ ] HTTPS 사용 확인
- [ ] 결제 금액 서버 검증 로직 확인

### 7.4 데이터베이스 연동 (선택사항)
실제 운영시에는 메모리 저장소 대신 데이터베이스 사용 권장:

```sql
-- 주문 테이블 예시
CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    order_id VARCHAR(255) UNIQUE NOT NULL,
    user_id INT,
    plan_name VARCHAR(50) NOT NULL,
    period VARCHAR(20) NOT NULL,
    amount INTEGER NOT NULL,
    status VARCHAR(20) DEFAULT 'pending',
    payment_key VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

## 8. 문제 해결

### 8.1 일반적인 오류들
- **"토스페이먼츠 키가 설정되지 않았습니다"**: 환경 변수 확인
- **"결제 모듈을 불러올 수 없습니다"**: 클라이언트 키 확인
- **"CORS 오류"**: Next.js에서는 일반적으로 발생하지 않음
- **"웹훅 서명 검증 실패"**: 웹훅 시크릿 키 확인

### 8.2 디버깅 팁
- 브라우저 개발자 도구 콘솔 확인
- 서버 로그 확인 (`npm run dev` 터미널)
- 토스페이먼츠 개발자센터의 결제 로그 확인

## 9. 추가 기능 구현 가이드

### 9.1 정기 결제 (구독)
토스페이먼츠의 정기결제 API 사용

### 9.2 결제 내역 조회
사용자별 결제 히스토리 페이지

### 9.3 환불 처리
결제 취소 API 연동

### 9.4 이메일 알림
결제 완료/실패 이메일 발송

이제 토스페이먼츠가 완전히 연동된 결제 시스템이 준비되었습니다! 🎉