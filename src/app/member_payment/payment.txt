## 구현된 전체 시스템 요약:

### 1. **결제 페이지 업데이트**
- 토스페이먼츠 SDK 연동
- 간소화된 UI (고객 정보만 입력)
- 실시간 결제 요청 처리

### 2. **결제 성공 페이지** (`/payment/success`)
- 결제 상세 정보 표시
- 영수증 링크 제공
- 서비스 이용 안내

### 3. **결제 실패 페이지** (`/payment/fail`)
- 오류 원인 분석 및 설명
- 해결방법 제시
- 재시도 옵션 제공

### 4. **서버 API** (`/api/payment/confirm`)
- 토스페이먼츠 결제 승인 처리
- 데이터베이스 저장 로직
- 구독 정보 업데이트
- 결제 취소 기능 포함

### 5. **완전한 설정 가이드**
- 환경 변수 설정
- TypeScript 타입 정의
- 데이터베이스 스키마
- 보안 고려사항
- 운영 환경 설정

## 주요 특징:

✅ **안전한 결제**: 토스페이먼츠의 PCI-DSS 준수 시스템  
✅ **다양한 결제수단**: 신용카드, 계좌이체, 가상계좌 등  
✅ **실시간 처리**: 결제 즉시 서비스 이용 가능  
✅ **오류 처리**: 상세한 오류 분석 및 해결방법 제시  
✅ **반응형 디자인**: 데스크탑/모바일 최적화  
✅ **보안**: 서버사이드 결제 검증 및 데이터 암호화  

이제 실제 프로젝트에 적용하기 위해:

1. **패키지 설치**: `npm install @tosspayments/payment-sdk`
2. **환경 변수 설정**: 토스페이먼츠에서 발급받은 API 키 추가
3. **데이터베이스 설정**: 결제 및 구독 테이블 생성
4. **테스트**: 테스트 환경에서 결제 플로우 검증
5. **운영 배포**: 실제 API 키로 교체 후 배포

추가로 구현하고 싶은 기능이나 질문이 있으시면 언제든지 말씀해 주세요!

# 토스페이먼츠 결제 시스템 설정 가이드

## 1. 필수 패키지 설치

```bash
npm install @tosspayments/payment-sdk
```

## 2. 환경 변수 설정

`.env.local` 파일을 생성하고 다음 내용을 추가:

```env
# 토스페이먼츠 API 키 (테스트용)
NEXT_PUBLIC_TOSS_CLIENT_KEY=test_ck_D5GePWvyJnrK0W0k6q8gLzN97Eoq
TOSS_SECRET_KEY=test_sk_zXLkKEypNArWmo50nX3lmeaxYG5R

# 운영환경에서는 실제 키로 변경
# NEXT_PUBLIC_TOSS_CLIENT_KEY=live_ck_your_client_key
# TOSS_SECRET_KEY=live_sk_your_secret_key

# 앱 기본 URL
NEXT_PUBLIC_BASE_URL=http://localhost:3000
```

## 3. TypeScript 타입 정의

`types/payment.ts` 파일 생성:

```typescript
export interface TossPaymentsInstance {
  requestPayment(method: string, options: PaymentRequest): Promise<void>
}

export interface PaymentRequest {
  amount: number
  orderId: string
  orderName: string
  customerName: string
  customerEmail: string
  successUrl: string
  failUrl: string
}

export interface PaymentResult {
  paymentKey: string
  orderId: string
  orderName: string
  method: string
  totalAmount: number
  status: string
  approvedAt: string
  receipt?: {
    url: string
  }
  card?: {
    company: string
    number: string
    installmentPlanMonths: number
  }
}
```

## 4. 데이터베이스 스키마 (Prisma 예시)

`prisma/schema.prisma`:

```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // 또는 "mysql", "sqlite"
  url      = env("DATABASE_URL")
}

model Payment {
  id            String   @id @default(cuid())
  paymentKey    String   @unique
  orderId       String   @unique
  orderName     String
  customerId    String
  amount        Int
  method        String
  status        String   // READY, IN_PROGRESS, WAITING_FOR_DEPOSIT, DONE, CANCELED, PARTIAL_CANCELED, ABORTED, EXPIRED
  approvedAt    DateTime?
  canceledAt    DateTime?
  receiptUrl    String?
  cardCompany   String?
  cardNumber    String?
  cancelReason  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("payments")
}

model Subscription {
  id           String   @id @default(cuid())
  customerId   String   @unique
  planType     String   // 'advanced', 'premium'
  billingCycle String   // 'monthly', 'quarterly'
  status       String   // 'active', 'canceled', 'expired'
  startDate    DateTime
  endDate      DateTime
  amount       Int
  paymentKey   String?
  autoRenew    Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("subscriptions")
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String
  phone        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  subscription Subscription?

  @@map("users")
}
```

## 5. 데이터베이스 설정

```bash
# Prisma 설치
npm install prisma @prisma/client

# Prisma 초기화
npx prisma init

# 데이터베이스 URL 설정 (.env에 추가)
DATABASE_URL="postgresql://username:password@localhost:5432/mydb"
# 또는 MySQL: "mysql://username:password@localhost:3306/mydb"

# 마이그레이션 실행
npx prisma migrate dev --name init

# Prisma Client 생성
npx prisma generate
```

## 6. 실제 운영환경 설정

### 6.1 토스페이먼츠 계정 생성
1. [토스페이먼츠 개발자센터](https://developers.tosspayments.com/) 접속
2. 회원가입 및 상점 정보 등록
3. 사업자등록증, 통장사본 등 서류 제출
4. 상점 승인 후 실제 API 키 발급

### 6.2 운영 환경 변수 교체
```env
# 운영용 실제 키로 교체
NEXT_PUBLIC_TOSS_CLIENT_KEY=live_ck_your_actual_client_key
TOSS_SECRET_KEY=live_sk_your_actual_secret_key
NEXT_PUBLIC_BASE_URL=https://yourdomain.com

# 데이터베이스 URL (운영 환경)
DATABASE_URL="postgresql://username:password@your-db-host:5432/production_db"
```

## 7. 보안 고려사항

### 7.1 서버 사이드 검증 필수
```typescript
// api/payment/confirm/route.ts에서 반드시 검증
const validatePayment = async (paymentKey: string, orderId: string, amount: number) => {
  // 1. 데이터베이스에서 주문 정보 확인
  const order = await db.order.findUnique({ where: { orderId } })
  if (!order || order.amount !== amount) {
    throw new Error('주문 정보가 일치하지 않습니다')
  }
  
  // 2. 중복 결제 확인
  const existingPayment = await db.payment.findUnique({ where: { orderId } })
  if (existingPayment && existingPayment.status === 'DONE') {
    throw new Error('이미 처리된 결제입니다')
  }
}
```

### 7.2 환경 변수 보안
```bash
# .gitignore에 추가
.env
.env.local
.env.production
.env.staging
```

### 7.3 HTTPS 필수
```javascript
// next.config.js
/** @type {import('next').NextConfig} */
const nextConfig = {
  async headers() {
    return [
      {
        source: '/(.*)',
        headers: [
          {
            key: 'Strict-Transport-Security',
            value: 'max-age=31536000; includeSubDomains'
          },
          {
            key: 'X-Content-Type-Options',
            value: 'nosniff'
          }
        ]
      }
    ]
  }
}

module.exports = nextConfig
```

## 8. 테스트 환경 설정

### 8.1 테스트 카드 정보
```javascript
// 토스페이먼츠 테스트 카드
const TEST_CARDS = {
  success: {
    number: '4000-0000-0000-0004',
    expiry: '12/25',
    cvc: '123'
  },
  failure: {
    number: '4000-0000-0000-0002', // 잔액 부족
    expiry: '12/25',
    cvc: '123'
  }
}
```

### 8.2 테스트 스크립트
```javascript
// __tests__/payment.test.js
import { render, screen, fireEvent, waitFor } from '@testing-library/react'
import PaymentPage from '../pages/payment'

describe('Payment Flow', () => {
  test('should complete payment successfully', async () => {
    render(<PaymentPage />)
    
    // 폼 입력
    fireEvent.change(screen.getByLabelText('이름'), { target: { value: '홍길동' } })
    fireEvent.change(screen.getByLabelText('이메일'), { target: { value: 'test@test.com' } })
    
    // 약관 동의
    fireEvent.click(screen.getByRole('checkbox', { name: /이용약관/ }))
    fireEvent.click(screen.getByRole('checkbox', { name: /개인정보/ }))
    
    // 결제 버튼 클릭
    fireEvent.click(screen.getByRole('button', { name: /결제하기/ }))
    
    await waitFor(() => {
      expect(screen.getByText('결제가 완료되었습니다')).toBeInTheDocument()
    })
  })
})
```

## 9. 웹훅 설정 (선택사항)

### 9.1 웹훅 엔드포인트 구현
```typescript
// app/api/webhooks/toss/route.ts
import { NextRequest, NextResponse } from 'next/server'
import crypto from 'crypto'

export async function POST(request: NextRequest) {
  try {
    const body = await request.text()
    const signature = request.headers.get('toss-signature')
    
    // 웹훅 서명 검증
    if (!verifyWebhookSignature(body, signature)) {
      return NextResponse.json({ error: 'Invalid signature' }, { status: 401 })
    }
    
    const data = JSON.parse(body)
    await handlePaymentWebhook(data)
    
    return NextResponse.json({ success: true })
  } catch (error) {
    console.error('Webhook error:', error)
    return NextResponse.json({ error: 'Webhook processing failed' }, { status: 500 })
  }
}

function verifyWebhookSignature(body: string, signature: string | null): boolean {
  if (!signature) return false
  
  const expectedSignature = crypto
    .createHmac('sha256', process.env.TOSS_WEBHOOK_SECRET!)
    .update(body)
    .digest('base64')
    
  return crypto.timingSafeEqual(
    Buffer.from(signature, 'base64'),
    Buffer.from(expectedSignature, 'base64')
  )
}
```

## 10. 오류 처리 및 로깅

### 10.1 구조화된 로깅
```typescript
// utils/logger.ts
export const paymentLogger = {
  info: (message: string, data?: any) => {
    console.log(`[PAYMENT-INFO] ${new Date().toISOString()} - ${message}`, data)
  },
  error: (message: string, error?: any) => {
    console.error(`[PAYMENT-ERROR] ${new Date().toISOString()} - ${message}`, error)
  },
  warn: (message: string, data?: any) => {
    console.warn(`[PAYMENT-WARN] ${new Date().toISOString()} - ${message}`, data)
  }
}
```

### 10.2 오류 처리 유틸리티
```typescript
// utils/payment-errors.ts
export const PAYMENT_ERRORS = {
  'CARD_COMPANY_NOT_AVAILABLE': {
    message: '카드사 서비스가 일시 중단되었습니다.',
    solution: '다른 카드를 이용하시거나 잠시 후 다시 시도해 주세요.'
  },
  'LIMIT_EXCEEDED': {
    message: '카드 한도를 초과했습니다.',
    solution: '카드사에 한도 증액을 요청하시거나 다른 카드를 이용해 주세요.'
  },
  'INVALID_CARD_EXPIRATION': {
    message: '카드 유효기간이 잘못되었습니다.',
    solution: '카드 유효기간을 다시 확인해 주세요.'
  }
  // ... 더 많은 오류 케이스
}

export const getPaymentError = (code: string) => {
  return PAYMENT_ERRORS[code] || {
    message: '결제 처리 중 오류가 발생했습니다.',
    solution: '잠시 후 다시 시도하시거나 고객지원팀에 문의해 주세요.'
  }
}
```

## 11. 배포 전 체크리스트

### 11.1 개발 환경 체크
- [ ] 토스페이먼츠 테스트 키로 결제 테스트 완료
- [ ] 결제 성공/실패 플로우 테스트
- [ ] 데이터베이스 연결 및 저장 확인
- [ ] 오류 처리 테스트
- [ ] 웹훅 처리 테스트 (설정한 경우)

### 11.2 운영 환경 체크
- [ ] 실제 API 키로 교체
- [ ] HTTPS 설정 완료
- [ ] 운영 데이터베이스 연결
- [ ] 도메인 설정 완료
- [ ] 보안 헤더 설정
- [ ] 로그 모니터링 시스템 구축

### 11.3 법적/규정 준수
- [ ] 개인정보 처리방침 업데이트
- [ ] 이용약관에 결제 관련 조항 추가
- [ ] PCI DSS 요구사항 검토
- [ ] 전자상거래법 준수 확인

## 12. 운영 및 모니터링

### 12.1 주요 모니터링 지표
```typescript
// 모니터링해야 할 지표들
const MONITORING_METRICS = {
  paymentSuccessRate: '결제 성공률',
  averagePaymentTime: '평균 결제 처리 시간',
  failuresByErrorCode: '오류 코드별 실패 건수',
  dailyRevenue: '일일 매출',
  refundRate: '환불율'
}
```

### 12.2 알림 설정
```typescript
// 중요 이벤트 알림
const sendAlert = async (event: string, data: any) => {
  if (event === 'PAYMENT_FAILURE_SPIKE') {
    // Slack, Discord, 이메일 등으로 알림
    await notificationService.send({
      channel: '#payments',
      message: `결제 실패율이 급증했습니다: ${data.failureRate}%`
    })
  }
}
```

## 13. 추가 리소스

### 13.1 공식 문서
- [토스페이먼츠 개발자 가이드](https://docs.tosspayments.com/)
- [결제창 연동 가이드](https://docs.tosspayments.com/guides/payment-widget/integration)
- [서버 연동 가이드](https://docs.tosspayments.com/guides/server-integration)

### 13.2 샘플 코드
- [토스페이먼츠 공식 샘플](https://github.com/tosspayments)
- [Next.js 연동 예제](https://github.com/tosspayments/tosspayments-sample)

이 가이드를 따라 설정하시면 안전하고 완전한 결제 시스템을 구축할 수 있습니다! 🚀