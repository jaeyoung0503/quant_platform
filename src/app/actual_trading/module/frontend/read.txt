# QuanTrade Pro - 퀀트 자동매매 시스템

실시간 퀀트 자동매매를 위한 종합 트레이딩 플랫폼입니다.

## 🚀 주요 기능

### 📊 실시간 대시보드
- 포트폴리오 실시간 모니터링
- 수익/손실 현황 추적
- 전략별 성과 분석
- 주문 체결 현황

### 🤖 자동매매 전략
- **볼린저밴드 평균회귀**: 밴드 이탈 후 회귀 전략
- **RSI 역추세**: 과매도/과매수 구간 역추세 매매  
- **모멘텀 추세추종**: MACD 기반 추세 추종
- **이동평균 골든크로스**: 단기/장기 MA 교차점 매매

### ⚡ 리스크 관리
- 일일 손실 한도 (-2%)
- 포지션 크기 제한 (5%)
- 최대 보유 종목 수 제한 (10개)
- 긴급 중단 기능

### 🔍 백테스트 엔진
- 과거 데이터 기반 전략 검증
- 성과 지표 계산 (수익률, 샤프 비율, MDD)
- 전략별 기여도 분석

## 🏗️ 시스템 아키텍처

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Frontend      │    │    Backend      │    │   Trading       │
│   (Next.js)     │◄──►│   (FastAPI)     │◄──►│   Engine        │
│                 │    │                 │    │   (Python)      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         │                       │                       │
         ▼                       ▼                       ▼
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   사용자 UI      │    │   SQLite DB     │    │   키움 API      │
│                 │    │                 │    │   (모의)        │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

## 📁 프로젝트 구조

```
quantrade_mvp/
├── frontend/                    # Next.js Frontend
│   ├── app/
│   │   ├── page.tsx            # 메인 대시보드
│   │   ├── layout.tsx          # 레이아웃
│   │   └── globals.css         # 스타일
│   ├── lib/
│   │   └── utils.ts            # 유틸리티 함수
│   └── package.json
│
└── backend/                     # Python Backend
    ├── main.py                 # FastAPI 앱
    ├── models.py              # 데이터 모델
    ├── database.py            # DB 연결
    ├── api.py                 # API 엔드포인트
    │
    ├── trading/               # 트레이딩 엔진
    │   ├── engine.py          # 메인 엔진
    │   ├── strategies.py      # 매매 전략
    │   ├── indicators.py      # 기술적 지표
    │   └── risk_manager.py    # 리스크 관리
    │
    ├── data/
    │   └── kiwoom_mock.py     # 키움 API 모의
    │
    ├── utils/
    │   ├── config.py          # 설정 관리
    │   └── logger.py          # 로깅
    │
    └── requirements.txt
```

## 🚦 시작하기

### 1. 환경 요구사항
- Python 3.9+
- Node.js 18+
- SQLite 3

### 2. 백엔드 설정

```bash
# 가상환경 생성
cd backend
python -m venv venv
source venv/bin/activate  # Windows: venv\Scripts\activate

# 의존성 설치
pip install -r requirements.txt

# 환경변수 설정
cp .env.example .env
# .env 파일에서 필요한 설정 수정

# 데이터베이스 초기화 및 서버 실행
python main.py
```

### 3. 프론트엔드 설정

```bash
# 의존성 설치
cd frontend
npm install

# 개발 서버 실행
npm run dev
```

### 4. 접속
- Frontend: http://localhost:3000
- Backend API: http://localhost:8000
- API 문서: http://localhost:8000/docs

## 🔧 주요 설정

### 트레이딩 설정 (backend/utils/config.py)
```python
# 기본 설정
initial_capital = 50,000,000  # 5천만원
max_daily_loss = -0.02        # -2%
max_position_size = 0.05      # 5%
max_positions = 10            # 최대 10개 종목
```

### 전략 설정 (config/strategies.json)
```json
{
  "bollinger_bands": {
    "enabled": true,
    "parameters": {
      "period": 20,
      "std_multiplier": 2.0,
      "stop_loss": 0.05
    },
    "investment_amount": 10000000
  }
}
```

## 📈 트레이딩 플로우

### 1. 실시간 데이터 수신
```
키움 API → 시세 데이터 → 트레이딩 엔진 → 전략 계산
```

### 2. 신호 생성 및 검증
```
기술적 지표 계산 → 매매 신호 생성 → 리스크 검증 → 주문 실행
```

### 3. 포트폴리오 업데이트
```
주문 체결 → 포지션 업데이트 → 손익 계산 → UI 반영
```

## 🛡️ 안전 장치

### 자동 리스크 관리
- **일일 손실 한도**: -2% 도달 시 자동 중단
- **포지션 크기 제한**: 단일 종목 최대 5%
- **변동성 필터**: 고변동성 종목 거래 제한

### 긴급 중단 시스템
- **수동 긴급중단**: 버튼 클릭으로 즉시 중단
- **자동 긴급중단**: 임계치 도달 시 자동 실행
- **모든 주문 취소**: 대기 중인 주문 일괄 취소

## 📊 모니터링

### 실시간 지표
- 포트폴리오 총 가치
- 실현/미실현 손익
- 일일 수익률
- 활성 포지션 수

### 성과 분석
- 전략별 수익 기여도
- 월별/일별 수익률 추이
- 위험 조정 수익률 (샤프 비율)
- 최대 낙폭 (MDD) 추적

## 🔍 백테스트

### 성과 지표
- **총 수익률**: 전체 기간 수익률
- **연간 수익률**: 연율화된 수익률  
- **샤프 비율**: 위험 대비 수익률
- **최대 낙폭**: 최대 손실 구간
- **승률**: 수익 거래 비율

### 실행 방법
```python
# API 호출
POST /api/backtest/run
{
  "strategy_type": "bollinger_bands",
  "start_date": "2023-01-01",
  "end_date": "2023-12-31",
  "initial_capital": 10000000
}
```

## ⚠️ 중요 사항

### 모의투자 모드
- 현재는 **모의 데이터**로 동작합니다
- 실제 거래를 위해서는 키움 API 인증이 필요합니다
- 모든 거래는 시뮬레이션입니다

### 리스크 경고
- 자동매매는 높은 리스크를 수반합니다
- 반드시 소액으로 테스트 후 사용하세요
- 시스템 장애 시 수동 개입이 필요할 수 있습니다

## 🔧 개발 가이드

### 새로운 전략 추가
1. `trading/strategies.py`에 전략 클래스 추가
2. `StrategyManager`에 전략 등록
3. 설정 파일에 기본 파라미터 추가

### API 엔드포인트 추가
1. `api.py`에 새로운 라우터 함수 추가
2. 모델 정의 (Pydantic)
3. 데이터베이스 연동
4. 프론트엔드에서 API 호출

### 프론트엔드 컴포넌트 추가
1. `app/` 디렉토리에 페이지 추가
2. `lib/utils.ts`에 유틸리티 함수 추가
3. Tailwind CSS로 스타일링

## 🐛 문제 해결

### 자주 발생하는 오류

#### 1. 데이터베이스 연결 오류
```bash
# SQLite 파일 권한 확인
chmod 644 data/quantrade.db

# 데이터베이스 재초기화
rm data/quantrade.db
python main.py
```

#### 2. 포트 충돌
```bash
# 포트 사용 중인 프로세스 확인
lsof -i :8000
lsof -i :3000

# 프로세스 종료 후 재시작
kill -9 [PID]
```

#### 3. 의존성 오류
```bash
# Python 의존성 재설치
pip install --upgrade -r requirements.txt

# Node.js 의존성 재설치
rm -rf node_modules package-lock.json
npm install
```

### 로그 확인
```bash
# 백엔드 로그
tail -f logs/quantrade.log

# 트레이딩 엔진 로그
tail -f logs/trading_engine.log

# 에러 로그
tail -f logs/errors.log
```

## 🔐 보안 고려사항

### API 보안
- 모든 API 엔드포인트에 인증 적용
- HTTPS 사용 (운영 환경)
- API 키 관리

### 데이터 보안
- 중요 설정값 환경변수로 관리
- 데이터베이스 암호화
- 로그에서 민감정보 제외

### 네트워크 보안
- 방화벽 설정
- VPN 접근 제한
- CORS 정책 적용

## 📝 개발 로드맵

### Phase 1: 기본 기능 (완료)
- [x] 실시간 대시보드
- [x] 기본 매매 전략 4개
- [x] 리스크 관리 시스템
- [x] 백테스트 엔진

### Phase 2: 고급 기능 (예정)
- [ ] 딥러닝 기반 전략
- [ ] 다중 자산 포트폴리오
- [ ] 고급 리스크 모델
- [ ] 실시간 알림 시스템

### Phase 3: 확장 기능 (예정)
- [ ] 모바일 앱
- [ ] 클라우드 배포
- [ ] 멀티 브로커 지원
- [ ] 소셜 트레이딩

## 👥 기여하기

### 개발 환경 설정
1. 저장소 Fork 및 Clone
2. 가상환경 생성 및 의존성 설치
3. pre-commit 훅 설정
4. 테스트 코드 작성

### 코드 스타일
- Python: Black + isort + flake8
- TypeScript: Prettier + ESLint
- 커밋 메시지: Conventional Commits

### 풀 리퀘스트 가이드라인
1. 기능별 브랜치 생성
2. 테스트 코드 포함
3. 문서 업데이트
4. 리뷰 요청

## 📞 지원 및 문의

### 기술 지원
- GitHub Issues: 버그 리포트 및 기능 요청
- Discussions: 질문 및 토론
- Wiki: 상세 문서

### 커뮤니티
- Discord: 실시간 채팅
- Telegram: 공지사항
- Blog: 개발 블로그

## 📄 라이선스

이 프로젝트는 MIT 라이선스 하에 배포됩니다. 자세한 내용은 [LICENSE](LICENSE) 파일을 참조하세요.

## ⚖️ 면책 조항

**투자 위험 경고**: 이 소프트웨어는 교육 및 연구 목적으로 제공됩니다. 

- **투자 손실 위험**: 자동매매는 투자 원금 손실 위험을 수반합니다
- **시스템 위험**: 소프트웨어 오류, 네트워크 장애 등으로 인한 손실 가능성
- **면책**: 개발자는 이 소프트웨어 사용으로 인한 어떠한 손실에 대해서도 책임지지 않습니다

**사용 전 주의사항**:
- 충분한 테스트 후 소액으로 시작하세요
- 리스크 관리 설정을 반드시 확인하세요
- 시장 상황을 지속적으로 모니터링하세요
- 필요시 전문가의 조언을 구하세요

---

## 📈 시스템 성능

### 처리 능력
- 실시간 데이터 처리: 1초 간격
- 동시 전략 실행: 10개까지
- 백테스트 속도: 1년 데이터 < 30초

### 시스템 요구사항
- **최소**: CPU 2코어, RAM 4GB, 저장공간 10GB
- **권장**: CPU 4코어, RAM 8GB, 저장공간 50GB
- **운영체제**: Windows 10+, macOS 10.15+, Ubuntu 18.04+

---

**개발팀**: QuanTrade Development Team  
**버전**: 1.0.0  
**최종 업데이트**: 2024년 12월